// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: protos/notification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PNserviceClient is the client API for PNservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PNserviceClient interface {
	// Set an user's token
	UpdateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*MessageReply, error)
	// Set/Update an user's notification setting
	UpdateNotificationSettings(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*MessageReply, error)
	// Send notification to user(s)
	SendNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*MessageReply, error)
}

type pNserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewPNserviceClient(cc grpc.ClientConnInterface) PNserviceClient {
	return &pNserviceClient{cc}
}

func (c *pNserviceClient) UpdateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/PNservice/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pNserviceClient) UpdateNotificationSettings(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/PNservice/UpdateNotificationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pNserviceClient) SendNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/PNservice/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PNserviceServer is the server API for PNservice service.
// All implementations must embed UnimplementedPNserviceServer
// for forward compatibility
type PNserviceServer interface {
	// Set an user's token
	UpdateToken(context.Context, *TokenRequest) (*MessageReply, error)
	// Set/Update an user's notification setting
	UpdateNotificationSettings(context.Context, *UpdateSettingRequest) (*MessageReply, error)
	// Send notification to user(s)
	SendNotification(context.Context, *NotificationRequest) (*MessageReply, error)
	mustEmbedUnimplementedPNserviceServer()
}

// UnimplementedPNserviceServer must be embedded to have forward compatible implementations.
type UnimplementedPNserviceServer struct {
}

func (UnimplementedPNserviceServer) UpdateToken(context.Context, *TokenRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedPNserviceServer) UpdateNotificationSettings(context.Context, *UpdateSettingRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSettings not implemented")
}
func (UnimplementedPNserviceServer) SendNotification(context.Context, *NotificationRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedPNserviceServer) mustEmbedUnimplementedPNserviceServer() {}

// UnsafePNserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PNserviceServer will
// result in compilation errors.
type UnsafePNserviceServer interface {
	mustEmbedUnimplementedPNserviceServer()
}

func RegisterPNserviceServer(s grpc.ServiceRegistrar, srv PNserviceServer) {
	s.RegisterService(&PNservice_ServiceDesc, srv)
}

func _PNservice_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PNserviceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PNservice/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PNserviceServer).UpdateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PNservice_UpdateNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PNserviceServer).UpdateNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PNservice/UpdateNotificationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PNserviceServer).UpdateNotificationSettings(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PNservice_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PNserviceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PNservice/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PNserviceServer).SendNotification(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PNservice_ServiceDesc is the grpc.ServiceDesc for PNservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PNservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PNservice",
	HandlerType: (*PNserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateToken",
			Handler:    _PNservice_UpdateToken_Handler,
		},
		{
			MethodName: "UpdateNotificationSettings",
			Handler:    _PNservice_UpdateNotificationSettings_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _PNservice_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/notification.proto",
}
